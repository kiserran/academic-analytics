{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kiserran/academic-analytics/blob/main/kiserran/academic-analytics\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b2d5d6fd",
      "metadata": {
        "id": "b2d5d6fd"
      },
      "source": [
        "# HW1 Sol"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "490ed5ee",
      "metadata": {
        "id": "490ed5ee"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "96b810f2",
      "metadata": {
        "id": "96b810f2"
      },
      "source": [
        "## Q1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b598936f",
      "metadata": {
        "id": "b598936f"
      },
      "outputs": [],
      "source": [
        "# dataset\n",
        "data1=pd.read_csv(\"https://raw.githubusercontent.com/wangx346/MAS651/main/customer_lifetime_value.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "47ebcbdc",
      "metadata": {
        "id": "47ebcbdc"
      },
      "source": [
        "### 1.1 Display the last 5 records."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2f9090a6",
      "metadata": {
        "id": "2f9090a6",
        "outputId": "7e4703d6-7e99-4848-bb77-a0d6409d8378"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Customer</th>\n",
              "      <th>Clv</th>\n",
              "      <th>Coverage</th>\n",
              "      <th>Education</th>\n",
              "      <th>EmploymentStatus</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Income</th>\n",
              "      <th>Location</th>\n",
              "      <th>Marital</th>\n",
              "      <th>Policiesnum</th>\n",
              "      <th>Policytype</th>\n",
              "      <th>Saleschannel</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9129</th>\n",
              "      <td>LA72316</td>\n",
              "      <td>23405.987980</td>\n",
              "      <td>Basic</td>\n",
              "      <td>Bachelor</td>\n",
              "      <td>Employed</td>\n",
              "      <td>M</td>\n",
              "      <td>71941</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Married</td>\n",
              "      <td>2</td>\n",
              "      <td>Personal Auto</td>\n",
              "      <td>Web</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9130</th>\n",
              "      <td>PK87824</td>\n",
              "      <td>3096.511217</td>\n",
              "      <td>Extended</td>\n",
              "      <td>College</td>\n",
              "      <td>Employed</td>\n",
              "      <td>F</td>\n",
              "      <td>21604</td>\n",
              "      <td>Suburban</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>1</td>\n",
              "      <td>Corporate Auto</td>\n",
              "      <td>Branch</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9131</th>\n",
              "      <td>TD14365</td>\n",
              "      <td>8163.890428</td>\n",
              "      <td>Extended</td>\n",
              "      <td>Bachelor</td>\n",
              "      <td>Unemployed</td>\n",
              "      <td>M</td>\n",
              "      <td>0</td>\n",
              "      <td>Suburban</td>\n",
              "      <td>Single</td>\n",
              "      <td>2</td>\n",
              "      <td>Corporate Auto</td>\n",
              "      <td>Branch</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9132</th>\n",
              "      <td>UP19263</td>\n",
              "      <td>7524.442436</td>\n",
              "      <td>Extended</td>\n",
              "      <td>College</td>\n",
              "      <td>Employed</td>\n",
              "      <td>M</td>\n",
              "      <td>21941</td>\n",
              "      <td>Suburban</td>\n",
              "      <td>Married</td>\n",
              "      <td>3</td>\n",
              "      <td>Personal Auto</td>\n",
              "      <td>Branch</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9133</th>\n",
              "      <td>Y167826</td>\n",
              "      <td>2611.836866</td>\n",
              "      <td>Extended</td>\n",
              "      <td>College</td>\n",
              "      <td>Unemployed</td>\n",
              "      <td>M</td>\n",
              "      <td>0</td>\n",
              "      <td>Suburban</td>\n",
              "      <td>Single</td>\n",
              "      <td>1</td>\n",
              "      <td>Corporate Auto</td>\n",
              "      <td>Call Center</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Customer           Clv  Coverage Education EmploymentStatus Gender  \\\n",
              "9129  LA72316  23405.987980     Basic  Bachelor         Employed      M   \n",
              "9130  PK87824   3096.511217  Extended   College         Employed      F   \n",
              "9131  TD14365   8163.890428  Extended  Bachelor       Unemployed      M   \n",
              "9132  UP19263   7524.442436  Extended   College         Employed      M   \n",
              "9133  Y167826   2611.836866  Extended   College       Unemployed      M   \n",
              "\n",
              "      Income Location   Marital   Policiesnum      Policytype Saleschannel  \n",
              "9129   71941     Urban   Married            2   Personal Auto          Web  \n",
              "9130   21604  Suburban  Divorced            1  Corporate Auto       Branch  \n",
              "9131       0  Suburban    Single            2  Corporate Auto       Branch  \n",
              "9132   21941  Suburban   Married            3   Personal Auto       Branch  \n",
              "9133       0  Suburban    Single            1  Corporate Auto  Call Center  "
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1.tail(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6afc3805",
      "metadata": {
        "id": "6afc3805"
      },
      "source": [
        "### 1.2 Find the number of rows and columns of the data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7b292e2b",
      "metadata": {
        "id": "7b292e2b",
        "outputId": "d7676671-828e-4157-c2b0-46d33a91742f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(9134, 12)"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "96335d51",
      "metadata": {
        "id": "96335d51"
      },
      "source": [
        "### 1.3 Output basic statistics for the numeric columns."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "42025725",
      "metadata": {
        "id": "42025725",
        "outputId": "8a37dc67-01c9-4a19-cdb6-bf6529bf4909"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Clv</th>\n",
              "      <th>Income</th>\n",
              "      <th>Policiesnum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>9134.000000</td>\n",
              "      <td>9134.000000</td>\n",
              "      <td>9134.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8004.940475</td>\n",
              "      <td>37657.380009</td>\n",
              "      <td>2.966170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6870.967608</td>\n",
              "      <td>30379.904734</td>\n",
              "      <td>2.390182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1898.007675</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>3994.251794</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5780.182197</td>\n",
              "      <td>33889.500000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8962.167041</td>\n",
              "      <td>62320.000000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>83325.381190</td>\n",
              "      <td>99981.000000</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Clv        Income  Policiesnum\n",
              "count   9134.000000   9134.000000  9134.000000\n",
              "mean    8004.940475  37657.380009     2.966170\n",
              "std     6870.967608  30379.904734     2.390182\n",
              "min     1898.007675      0.000000     1.000000\n",
              "25%     3994.251794      0.000000     1.000000\n",
              "50%     5780.182197  33889.500000     2.000000\n",
              "75%     8962.167041  62320.000000     4.000000\n",
              "max    83325.381190  99981.000000     9.000000"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0564ffe9",
      "metadata": {
        "id": "0564ffe9"
      },
      "source": [
        "### 1.4 Find the mean and standard deviation of the variable Clv, which denotes customer lifetime value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d83b440b",
      "metadata": {
        "id": "d83b440b",
        "outputId": "3cd69820-d9d3-4802-cbf2-003888ece207"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "8004.9404749870755"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# mean\n",
        "data1['Clv'].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a9859389",
      "metadata": {
        "id": "a9859389",
        "outputId": "873d130c-8e29-4b2d-c0ea-b925eb1469a1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "6870.967608356924"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# std\n",
        "data1['Clv'].std()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ba13eddf",
      "metadata": {
        "id": "ba13eddf"
      },
      "source": [
        "### 1.5 Extract the column Education and print the first 7 records."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e1a86581",
      "metadata": {
        "id": "e1a86581",
        "outputId": "331e2856-9b2d-4179-b017-9de85cebd8f9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0    Bachelor\n",
              "1    Bachelor\n",
              "2    Bachelor\n",
              "3    Bachelor\n",
              "4    Bachelor\n",
              "5    Bachelor\n",
              "6     College\n",
              "Name: Education, dtype: object"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1['Education'].head(7)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "15846918",
      "metadata": {
        "id": "15846918"
      },
      "source": [
        "### 1.6 Group the data using education and name the data set data1_edu."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "79e2546a",
      "metadata": {
        "id": "79e2546a"
      },
      "outputs": [],
      "source": [
        "data1_edu = data1.groupby(['Education'])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "03f128bc",
      "metadata": {
        "id": "03f128bc"
      },
      "source": [
        "### 1.7 Calculate the mean of Clv for the grouped data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6e572eea",
      "metadata": {
        "id": "6e572eea",
        "outputId": "54780e81-f99f-4853-bfa6-ff5a97f5b0e0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Education\n",
              "Bachelor                7872.660412\n",
              "College                 7851.064644\n",
              "Doctor                  7520.344837\n",
              "High School or Below    8296.709033\n",
              "Master                  8243.484692\n",
              "Name: Clv, dtype: float64"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1_edu.Clv.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "595b45c4",
      "metadata": {
        "id": "595b45c4"
      },
      "source": [
        "### 1.8 Group using two variables Education and Gender, then calculate the mean of Clv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7421b674",
      "metadata": {
        "id": "7421b674",
        "outputId": "a4d051f0-d8d0-4a18-d0d3-a2b71a2e9f1f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Education             Gender\n",
              "Bachelor              F         8012.877921\n",
              "                      M         7722.072099\n",
              "College               F         7732.833339\n",
              "                      M         7971.342089\n",
              "Doctor                F         7423.630380\n",
              "                      M         7614.823122\n",
              "High School or Below  F         8578.995840\n",
              "                      M         8010.082690\n",
              "Master                F         8319.111562\n",
              "                      M         8158.078485\n",
              "Name: Clv, dtype: float64"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data1.groupby(['Education','Gender']).Clv.mean()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "91bb2ab1",
      "metadata": {
        "id": "91bb2ab1"
      },
      "source": [
        "### 1.9 Make a histogram of Clv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "45c4f7eb",
      "metadata": {
        "id": "45c4f7eb",
        "outputId": "c3d09992-65e2-49c9-eda1-083281e0b631"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "data1.Clv.hist()\n",
        "plt.title('Histogram of Clv')\n",
        "plt.xlabel('Clv')\n",
        "plt.ylabel('Frequency')\n",
        "plt.savefig('hist_Clv')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8a649a4d",
      "metadata": {
        "id": "8a649a4d"
      },
      "source": [
        "# Q2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ce3809a8",
      "metadata": {
        "id": "ce3809a8"
      },
      "outputs": [],
      "source": [
        "# dataset\n",
        "from sklearn.datasets import load_boston\n",
        "boston = load_boston()\n",
        "# def explanatory and reponse variables\n",
        "X = pd.DataFrame(boston.data, columns=boston.feature_names)\n",
        "Y = pd.DataFrame(boston.target)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bbc6b802",
      "metadata": {
        "id": "bbc6b802"
      },
      "source": [
        "### 2.1    Create a training data set and a test data set such that the test data set contains randomly 20% of the data set. Set the random seed to be 40. Implement Lasso regression with parameter set to be 0.1 on the training data. Report the estimated regression coefficients."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e4fca461",
      "metadata": {
        "id": "e4fca461"
      },
      "outputs": [],
      "source": [
        "# split dataset into training and test data\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=40)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d9d37f4",
      "metadata": {
        "id": "0d9d37f4",
        "outputId": "3f0c3c56-f9f3-462c-8197-c6c1a88e7208"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CRIM</th>\n",
              "      <th>ZN</th>\n",
              "      <th>INDUS</th>\n",
              "      <th>CHAS</th>\n",
              "      <th>NOX</th>\n",
              "      <th>RM</th>\n",
              "      <th>AGE</th>\n",
              "      <th>DIS</th>\n",
              "      <th>RAD</th>\n",
              "      <th>TAX</th>\n",
              "      <th>PTRATIO</th>\n",
              "      <th>B</th>\n",
              "      <th>LSTAT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.00632</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2.31</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.538</td>\n",
              "      <td>6.575</td>\n",
              "      <td>65.2</td>\n",
              "      <td>4.0900</td>\n",
              "      <td>1.0</td>\n",
              "      <td>296.0</td>\n",
              "      <td>15.3</td>\n",
              "      <td>396.90</td>\n",
              "      <td>4.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.02731</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>6.421</td>\n",
              "      <td>78.9</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>396.90</td>\n",
              "      <td>9.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.02729</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.469</td>\n",
              "      <td>7.185</td>\n",
              "      <td>61.1</td>\n",
              "      <td>4.9671</td>\n",
              "      <td>2.0</td>\n",
              "      <td>242.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>392.83</td>\n",
              "      <td>4.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.03237</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>6.998</td>\n",
              "      <td>45.8</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>394.63</td>\n",
              "      <td>2.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.06905</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.18</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.458</td>\n",
              "      <td>7.147</td>\n",
              "      <td>54.2</td>\n",
              "      <td>6.0622</td>\n",
              "      <td>3.0</td>\n",
              "      <td>222.0</td>\n",
              "      <td>18.7</td>\n",
              "      <td>396.90</td>\n",
              "      <td>5.33</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
              "0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
              "1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
              "2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
              "3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
              "4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
              "\n",
              "   PTRATIO       B  LSTAT  \n",
              "0     15.3  396.90   4.98  \n",
              "1     17.8  396.90   9.14  \n",
              "2     17.8  392.83   4.03  \n",
              "3     18.7  394.63   2.94  \n",
              "4     18.7  396.90   5.33  "
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Check the value of coveriates. Some coveriates (TAX, B) are pretty larger than others. We need to normalize the data so that all coveriates can be penalized equally.\n",
        "X.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e17cd4bf",
      "metadata": {
        "id": "e17cd4bf",
        "outputId": "cb517ba3-b82b-4c38-93dc-f41ee56f1b00"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "    Columns  Coefficient Estimate\n",
            "0      CRIM             -0.000000\n",
            "1        ZN              0.000000\n",
            "2     INDUS             -0.000000\n",
            "3      CHAS              0.000000\n",
            "4       NOX             -0.000000\n",
            "5        RM              3.241256\n",
            "6       AGE             -0.000000\n",
            "7       DIS              0.000000\n",
            "8       RAD             -0.000000\n",
            "9       TAX             -0.000000\n",
            "10  PTRATIO             -0.275773\n",
            "11        B              0.000000\n",
            "12    LSTAT             -0.457000\n"
          ]
        }
      ],
      "source": [
        "from sklearn.linear_model import Lasso\n",
        "lasso = Lasso(alpha=0.1, normalize=True) # Set normalize = True here to normalize the coveriates\n",
        "lasso.fit(X_train, y_train)\n",
        "\n",
        "lasso_coeff = pd.DataFrame()\n",
        "lasso_coeff[\"Columns\"] = X_train.columns\n",
        "lasso_coeff['Coefficient Estimate'] = pd.Series(lasso.coef_)\n",
        "\n",
        "print(lasso_coeff)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0d9ef2b3",
      "metadata": {
        "id": "0d9ef2b3"
      },
      "source": [
        "### 2.2 Evaluate the above fitted Lasso model on the test data and report the RMSE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3df840ff",
      "metadata": {
        "id": "3df840ff",
        "outputId": "45e6c94d-ba13-4c5e-890b-cc98b85900f3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "test RMSE 6.799086922121378\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "y_pred = lasso.predict(X_test)\n",
        "rmse = np.sqrt(mean_squared_error(y_pred, y_test))\n",
        "print(\"test RMSE\", rmse)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "aed0d729",
      "metadata": {
        "id": "aed0d729"
      },
      "source": [
        "### 2.3 Select the tuning parameter for Lasso using a 10-fold cross-validation. What is your selected tuning parameter value?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9e8cddd4",
      "metadata": {
        "id": "9e8cddd4",
        "outputId": "71633ef9-b2f6-4c44-8a49-25f72e5b2ffe"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Alpha= 0.0007470271276290051\n"
          ]
        }
      ],
      "source": [
        "from sklearn.linear_model import LassoCV\n",
        "lassocv = LassoCV(alphas=None, cv=10, max_iter=100000, normalize=True)# Still set normalize = True here to normalize the coveriates\n",
        "lassocv.fit(X_train, y_train.values.ravel())\n",
        "print(\"Alpha=\", lassocv.alpha_)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d27e7b03",
      "metadata": {
        "id": "d27e7b03"
      },
      "source": [
        "### 2.4 Use the chosen tuning parameter to fit the final model on the training data. Report the estimated coefficients. Evaluate the final model on the test data and report the RMSE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "632b4e08",
      "metadata": {
        "id": "632b4e08",
        "outputId": "8c714c61-dd4b-40ab-9b61-042ae4eb11a5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "    Columns  Coefficient Estimate\n",
            "0      CRIM             -0.120047\n",
            "1        ZN              0.040011\n",
            "2     INDUS             -0.014029\n",
            "3      CHAS              2.698146\n",
            "4       NOX            -15.479616\n",
            "5        RM              4.002240\n",
            "6       AGE             -0.003226\n",
            "7       DIS             -1.294676\n",
            "8       RAD              0.262500\n",
            "9       TAX             -0.010813\n",
            "10  PTRATIO             -0.881130\n",
            "11        B              0.005803\n",
            "12    LSTAT             -0.525642\n"
          ]
        }
      ],
      "source": [
        "lasso.set_params(alpha=lassocv.alpha_) #Call the previous model and just change the alpha. The remaining settings won't be changed here.\n",
        "                                       #Thus 'normalize' is still True here.\n",
        "lasso.fit(X_train, y_train)\n",
        "\n",
        "lasso_coeff_cv = pd.DataFrame()\n",
        "lasso_coeff_cv[\"Columns\"] = X_train.columns\n",
        "lasso_coeff_cv['Coefficient Estimate'] = pd.Series(lasso.coef_)\n",
        "\n",
        "print(lasso_coeff_cv)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "96b7bc30",
      "metadata": {
        "id": "96b7bc30",
        "outputId": "bcc0ddcf-ba7d-465b-d945-02d08c22f44b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "test RMSE : 5.832703561823408\n"
          ]
        }
      ],
      "source": [
        "y_pred_cv = lasso.predict(X_test)\n",
        "rmse_cv = np.sqrt(mean_squared_error(y_pred_cv, y_test))\n",
        "print(\"test RMSE :\", rmse_cv)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ae0f7040",
      "metadata": {
        "id": "ae0f7040"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}