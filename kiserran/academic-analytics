{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kiserran/academic-analytics/blob/main/kiserran/academic-analytics\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X97uYCOH2qAw"
      },
      "source": [
        "###  First neural network example with keras\n",
        "\n",
        "##### Learning goals: (1) Use keras to fit a deep learning model; (2) A new way to handle missing data\n",
        "\n",
        "Input Variables (X):\n",
        "\n",
        "Number of times pregnant\n",
        "Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n",
        "Diastolic blood pressure (mm Hg)\n",
        "Triceps skin fold thickness (mm)\n",
        "2-Hour serum insulin (mu U/ml)\n",
        "Body mass index (weight in kg/(height in m)^2)\n",
        "Diabetes pedigree function\n",
        "Age (years)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CjrJYxIk2qAy"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h_k1-iIR2qAz"
      },
      "outputs": [],
      "source": [
        "# load the dataset.\n",
        "dataset = pd.read_csv('https://raw.githubusercontent.com/wangx346/MAS651/main/diabetes.csv', header=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yNtCSe1O2qAz",
        "outputId": "76eee445-2e51-42ea-918c-ca1f1b30e984"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(768, 9)\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0            6      148             72             35        0  33.6   \n",
              "1            1       85             66             29        0  26.6   \n",
              "2            8      183             64              0        0  23.3   \n",
              "3            1       89             66             23       94  28.1   \n",
              "4            0      137             40             35      168  43.1   \n",
              "\n",
              "   DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                     0.627   50        1  \n",
              "1                     0.351   31        0  \n",
              "2                     0.672   32        1  \n",
              "3                     0.167   21        0  \n",
              "4                     2.288   33        1  "
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(dataset.shape)\n",
        "dataset.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mG6cQQf-2qA0"
      },
      "source": [
        "###### The Outcome Column determines whether patient has diabetes or not (1-Diabetes,0-No Diabetes).Remaining other columns determine features which are essential for predicting ."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q5Mg0QYE2qA0",
        "outputId": "415cff13-c253-426d-fa0d-ee66fba012e9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
              "       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "dataset.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X5nFCwIa2qA0"
      },
      "outputs": [],
      "source": [
        "# '0' value in below columns makes no sense. Hence making them NaN.\n",
        "dataset[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = dataset[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uKyHgU422qA0",
        "outputId": "db1d4af3-5b4b-437d-f81c-c0ba76469cc9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pregnancies                   0\n",
              "Glucose                       5\n",
              "BloodPressure                35\n",
              "SkinThickness               227\n",
              "Insulin                     374\n",
              "BMI                          11\n",
              "DiabetesPedigreeFunction      0\n",
              "Age                           0\n",
              "Outcome                       0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "dataset.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zWxZ1CGQ2qA1"
      },
      "source": [
        "###  ### Filling the Null Value By Imputing Using k-NN (optional material)\n",
        "\n",
        "The k nearest neighbours is an algorithm that is used for simple classification. The algorithm uses ‘feature similarity’ to predict the values of any new data points. This means that the new point is assigned a value based on how closely it resembles the points in the training set. This can be very useful in making predictions about the missing values by finding the k’s closest neighbours to the observation with missing data and then imputing them based on the non-missing values in the neighbourhood."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jpQrK8SL2qA1"
      },
      "outputs": [],
      "source": [
        "# Filling the Null Value By Imputing Using k-NN\n",
        "## Need to first install the impyute library\n",
        "import sys\n",
        "from impyute.imputation.cs import fast_knn\n",
        "sys.setrecursionlimit(100000) #Increase the recursion limit of the OS\n",
        "\n",
        "# start the KNN training\n",
        "imputed_training=fast_knn(dataset[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].values, k=30)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_BZFZvra2qA1",
        "outputId": "2b26ef58-5ed5-4c62-ec0b-91d6584f404f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pregnancies                 0\n",
              "Glucose                     0\n",
              "BloodPressure               0\n",
              "SkinThickness               0\n",
              "Insulin                     0\n",
              "BMI                         0\n",
              "DiabetesPedigreeFunction    0\n",
              "Age                         0\n",
              "Outcome                     0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "dataset_t1 = pd.DataFrame(imputed_training,columns=['Glucose','BloodPressure','SkinThickness','Insulin','BMI'])\n",
        "\n",
        "dataset[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = dataset_t1[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']]\n",
        "\n",
        "dataset.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wEro1iVC2qA2",
        "outputId": "ce3c2e7c-914e-432e-8f88-4ad0a98765ab"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Pregnancies</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.128705</td>\n",
              "      <td>0.207127</td>\n",
              "      <td>0.085745</td>\n",
              "      <td>0.055999</td>\n",
              "      <td>0.022078</td>\n",
              "      <td>-0.033523</td>\n",
              "      <td>0.544341</td>\n",
              "      <td>0.221898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Glucose</th>\n",
              "      <td>0.128705</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.222983</td>\n",
              "      <td>0.203988</td>\n",
              "      <td>0.421134</td>\n",
              "      <td>0.233222</td>\n",
              "      <td>0.137605</td>\n",
              "      <td>0.267467</td>\n",
              "      <td>0.493534</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BloodPressure</th>\n",
              "      <td>0.207127</td>\n",
              "      <td>0.222983</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.204080</td>\n",
              "      <td>0.071782</td>\n",
              "      <td>0.285243</td>\n",
              "      <td>-0.002179</td>\n",
              "      <td>0.324620</td>\n",
              "      <td>0.171379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SkinThickness</th>\n",
              "      <td>0.085745</td>\n",
              "      <td>0.203988</td>\n",
              "      <td>0.204080</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.157634</td>\n",
              "      <td>0.559890</td>\n",
              "      <td>0.102523</td>\n",
              "      <td>0.132757</td>\n",
              "      <td>0.225501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Insulin</th>\n",
              "      <td>0.055999</td>\n",
              "      <td>0.421134</td>\n",
              "      <td>0.071782</td>\n",
              "      <td>0.157634</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.166585</td>\n",
              "      <td>0.098510</td>\n",
              "      <td>0.136655</td>\n",
              "      <td>0.214342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BMI</th>\n",
              "      <td>0.022078</td>\n",
              "      <td>0.233222</td>\n",
              "      <td>0.285243</td>\n",
              "      <td>0.559890</td>\n",
              "      <td>0.166585</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.152806</td>\n",
              "      <td>0.027551</td>\n",
              "      <td>0.313128</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <td>-0.033523</td>\n",
              "      <td>0.137605</td>\n",
              "      <td>-0.002179</td>\n",
              "      <td>0.102523</td>\n",
              "      <td>0.098510</td>\n",
              "      <td>0.152806</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.033561</td>\n",
              "      <td>0.173844</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0.544341</td>\n",
              "      <td>0.267467</td>\n",
              "      <td>0.324620</td>\n",
              "      <td>0.132757</td>\n",
              "      <td>0.136655</td>\n",
              "      <td>0.027551</td>\n",
              "      <td>0.033561</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.238356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outcome</th>\n",
              "      <td>0.221898</td>\n",
              "      <td>0.493534</td>\n",
              "      <td>0.171379</td>\n",
              "      <td>0.225501</td>\n",
              "      <td>0.214342</td>\n",
              "      <td>0.313128</td>\n",
              "      <td>0.173844</td>\n",
              "      <td>0.238356</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                          Pregnancies   Glucose  BloodPressure  SkinThickness  \\\n",
              "Pregnancies                  1.000000  0.128705       0.207127       0.085745   \n",
              "Glucose                      0.128705  1.000000       0.222983       0.203988   \n",
              "BloodPressure                0.207127  0.222983       1.000000       0.204080   \n",
              "SkinThickness                0.085745  0.203988       0.204080       1.000000   \n",
              "Insulin                      0.055999  0.421134       0.071782       0.157634   \n",
              "BMI                          0.022078  0.233222       0.285243       0.559890   \n",
              "DiabetesPedigreeFunction    -0.033523  0.137605      -0.002179       0.102523   \n",
              "Age                          0.544341  0.267467       0.324620       0.132757   \n",
              "Outcome                      0.221898  0.493534       0.171379       0.225501   \n",
              "\n",
              "                           Insulin       BMI  DiabetesPedigreeFunction  \\\n",
              "Pregnancies               0.055999  0.022078                 -0.033523   \n",
              "Glucose                   0.421134  0.233222                  0.137605   \n",
              "BloodPressure             0.071782  0.285243                 -0.002179   \n",
              "SkinThickness             0.157634  0.559890                  0.102523   \n",
              "Insulin                   1.000000  0.166585                  0.098510   \n",
              "BMI                       0.166585  1.000000                  0.152806   \n",
              "DiabetesPedigreeFunction  0.098510  0.152806                  1.000000   \n",
              "Age                       0.136655  0.027551                  0.033561   \n",
              "Outcome                   0.214342  0.313128                  0.173844   \n",
              "\n",
              "                               Age   Outcome  \n",
              "Pregnancies               0.544341  0.221898  \n",
              "Glucose                   0.267467  0.493534  \n",
              "BloodPressure             0.324620  0.171379  \n",
              "SkinThickness             0.132757  0.225501  \n",
              "Insulin                   0.136655  0.214342  \n",
              "BMI                       0.027551  0.313128  \n",
              "DiabetesPedigreeFunction  0.033561  0.173844  \n",
              "Age                       1.000000  0.238356  \n",
              "Outcome                   0.238356  1.000000  "
            ]
          },
          "execution_count": 35,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "## correlation matrix\n",
        "corr = dataset.corr()\n",
        "corr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qmaZjJ2z2qA2",
        "outputId": "353f7ac7-7221-4971-f12b-e052a76e792a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<AxesSubplot:>"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.heatmap(dataset.corr(),annot=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6Qz_Mpd92qA2",
        "outputId": "87e21dea-aaa0-4375-d608-9e86236c1050"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Diabetes Patient')"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x1440 with 9 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "p = dataset[dataset['Outcome']==1].hist(figsize = (20,20))\n",
        "plt.title('Diabetes Patient')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_TrYZXHm2qA2"
      },
      "outputs": [],
      "source": [
        "# Select last column of dataframe as a series\n",
        "y = dataset.iloc[: , -1]\n",
        "\n",
        "# # Select all but the last column of dataframe\n",
        "X = dataset.iloc[: , :-1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jYykDhgX2qA2"
      },
      "source": [
        "#### One of the most important data transformations I need to apply is the features scaling. Basically most of the machine learning algorithms don't work very well if the features have a different set of values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O-HLWJY-2qA2"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tzgcgEcD2qA2"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9WhGfn7Y2qA2"
      },
      "outputs": [],
      "source": [
        "# define the keras model\n",
        "model = Sequential()\n",
        "model.add(Dense(12, input_dim=8, activation='relu'))\n",
        "model.add(Dense(8, activation='relu'))\n",
        "model.add(Dense(1, activation='sigmoid'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M7nxMYZx2qA2",
        "outputId": "09ea3609-1655-4790-ec98-1f46221035a0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/150\n",
            "62/62 [==============================] - 1s 1ms/step - loss: 0.6852 - accuracy: 0.6091\n",
            "Epoch 2/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.6277 - accuracy: 0.6938\n",
            "Epoch 3/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.5790 - accuracy: 0.7052\n",
            "Epoch 4/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.5373 - accuracy: 0.7345\n",
            "Epoch 5/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.5067 - accuracy: 0.7541\n",
            "Epoch 6/150\n",
            "62/62 [==============================] - 0s 936us/step - loss: 0.4867 - accuracy: 0.7541\n",
            "Epoch 7/150\n",
            "62/62 [==============================] - 0s 931us/step - loss: 0.4722 - accuracy: 0.7655\n",
            "Epoch 8/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4613 - accuracy: 0.7720\n",
            "Epoch 9/150\n",
            "62/62 [==============================] - 0s 989us/step - loss: 0.4533 - accuracy: 0.7769\n",
            "Epoch 10/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4455 - accuracy: 0.7883\n",
            "Epoch 11/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4399 - accuracy: 0.7964\n",
            "Epoch 12/150\n",
            "62/62 [==============================] - 0s 913us/step - loss: 0.4368 - accuracy: 0.7964\n",
            "Epoch 13/150\n",
            "62/62 [==============================] - 0s 968us/step - loss: 0.4322 - accuracy: 0.7948\n",
            "Epoch 14/150\n",
            "62/62 [==============================] - 0s 979us/step - loss: 0.4289 - accuracy: 0.7980\n",
            "Epoch 15/150\n",
            "62/62 [==============================] - 0s 927us/step - loss: 0.4252 - accuracy: 0.8046\n",
            "Epoch 16/150\n",
            "62/62 [==============================] - 0s 918us/step - loss: 0.4236 - accuracy: 0.8013\n",
            "Epoch 17/150\n",
            "62/62 [==============================] - 0s 957us/step - loss: 0.4209 - accuracy: 0.8013\n",
            "Epoch 18/150\n",
            "62/62 [==============================] - 0s 929us/step - loss: 0.4181 - accuracy: 0.8062\n",
            "Epoch 19/150\n",
            "62/62 [==============================] - 0s 938us/step - loss: 0.4157 - accuracy: 0.8046\n",
            "Epoch 20/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4138 - accuracy: 0.8013\n",
            "Epoch 21/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4113 - accuracy: 0.8111\n",
            "Epoch 22/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4098 - accuracy: 0.8127\n",
            "Epoch 23/150\n",
            "62/62 [==============================] - 0s 962us/step - loss: 0.4082 - accuracy: 0.8127\n",
            "Epoch 24/150\n",
            "62/62 [==============================] - 0s 948us/step - loss: 0.4066 - accuracy: 0.8127\n",
            "Epoch 25/150\n",
            "62/62 [==============================] - 0s 941us/step - loss: 0.4052 - accuracy: 0.8192\n",
            "Epoch 26/150\n",
            "62/62 [==============================] - 0s 904us/step - loss: 0.4038 - accuracy: 0.8192\n",
            "Epoch 27/150\n",
            "62/62 [==============================] - 0s 907us/step - loss: 0.4020 - accuracy: 0.8192\n",
            "Epoch 28/150\n",
            "62/62 [==============================] - 0s 975us/step - loss: 0.4007 - accuracy: 0.8225\n",
            "Epoch 29/150\n",
            "62/62 [==============================] - 0s 914us/step - loss: 0.3999 - accuracy: 0.8225\n",
            "Epoch 30/150\n",
            "62/62 [==============================] - 0s 951us/step - loss: 0.3981 - accuracy: 0.8241\n",
            "Epoch 31/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3963 - accuracy: 0.8225\n",
            "Epoch 32/150\n",
            "62/62 [==============================] - 0s 943us/step - loss: 0.3956 - accuracy: 0.8274\n",
            "Epoch 33/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3939 - accuracy: 0.8160\n",
            "Epoch 34/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3924 - accuracy: 0.8241\n",
            "Epoch 35/150\n",
            "62/62 [==============================] - 0s 975us/step - loss: 0.3911 - accuracy: 0.8274\n",
            "Epoch 36/150\n",
            "62/62 [==============================] - 0s 955us/step - loss: 0.3903 - accuracy: 0.8257\n",
            "Epoch 37/150\n",
            "62/62 [==============================] - 0s 945us/step - loss: 0.3886 - accuracy: 0.8225\n",
            "Epoch 38/150\n",
            "62/62 [==============================] - 0s 937us/step - loss: 0.3875 - accuracy: 0.8257\n",
            "Epoch 39/150\n",
            "62/62 [==============================] - 0s 941us/step - loss: 0.3872 - accuracy: 0.8241\n",
            "Epoch 40/150\n",
            "62/62 [==============================] - 0s 963us/step - loss: 0.3855 - accuracy: 0.8290\n",
            "Epoch 41/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3841 - accuracy: 0.8241\n",
            "Epoch 42/150\n",
            "62/62 [==============================] - 0s 992us/step - loss: 0.3830 - accuracy: 0.8290\n",
            "Epoch 43/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3812 - accuracy: 0.8257\n",
            "Epoch 44/150\n",
            "62/62 [==============================] - 0s 935us/step - loss: 0.3805 - accuracy: 0.8257\n",
            "Epoch 45/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3792 - accuracy: 0.8274\n",
            "Epoch 46/150\n",
            "62/62 [==============================] - 0s 986us/step - loss: 0.3780 - accuracy: 0.8290\n",
            "Epoch 47/150\n",
            "62/62 [==============================] - 0s 968us/step - loss: 0.3767 - accuracy: 0.8257\n",
            "Epoch 48/150\n",
            "62/62 [==============================] - 0s 975us/step - loss: 0.3760 - accuracy: 0.8322\n",
            "Epoch 49/150\n",
            "62/62 [==============================] - 0s 911us/step - loss: 0.3746 - accuracy: 0.8339\n",
            "Epoch 50/150\n",
            "62/62 [==============================] - 0s 925us/step - loss: 0.3733 - accuracy: 0.8322\n",
            "Epoch 51/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3722 - accuracy: 0.8339\n",
            "Epoch 52/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3711 - accuracy: 0.8322\n",
            "Epoch 53/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3693 - accuracy: 0.8371\n",
            "Epoch 54/150\n",
            "62/62 [==============================] - 0s 984us/step - loss: 0.3691 - accuracy: 0.8355\n",
            "Epoch 55/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3679 - accuracy: 0.8306\n",
            "Epoch 56/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3665 - accuracy: 0.8355\n",
            "Epoch 57/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3670 - accuracy: 0.8404\n",
            "Epoch 58/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3649 - accuracy: 0.8404\n",
            "Epoch 59/150\n",
            "62/62 [==============================] - 0s 965us/step - loss: 0.3639 - accuracy: 0.8388\n",
            "Epoch 60/150\n",
            "62/62 [==============================] - 0s 952us/step - loss: 0.3635 - accuracy: 0.8371\n",
            "Epoch 61/150\n",
            "62/62 [==============================] - 0s 990us/step - loss: 0.3619 - accuracy: 0.8355\n",
            "Epoch 62/150\n",
            "62/62 [==============================] - 0s 962us/step - loss: 0.3614 - accuracy: 0.8420\n",
            "Epoch 63/150\n",
            "62/62 [==============================] - 0s 954us/step - loss: 0.3600 - accuracy: 0.8420\n",
            "Epoch 64/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3598 - accuracy: 0.8404\n",
            "Epoch 65/150\n",
            "62/62 [==============================] - 0s 932us/step - loss: 0.3590 - accuracy: 0.8371\n",
            "Epoch 66/150\n",
            "62/62 [==============================] - 0s 944us/step - loss: 0.3577 - accuracy: 0.8420\n",
            "Epoch 67/150\n",
            "62/62 [==============================] - 0s 937us/step - loss: 0.3564 - accuracy: 0.8420\n",
            "Epoch 68/150\n",
            "62/62 [==============================] - 0s 904us/step - loss: 0.3568 - accuracy: 0.8371\n",
            "Epoch 69/150\n",
            "62/62 [==============================] - 0s 953us/step - loss: 0.3573 - accuracy: 0.8371\n",
            "Epoch 70/150\n",
            "62/62 [==============================] - 0s 877us/step - loss: 0.3541 - accuracy: 0.8420\n",
            "Epoch 71/150\n",
            "62/62 [==============================] - 0s 949us/step - loss: 0.3531 - accuracy: 0.8469\n",
            "Epoch 72/150\n",
            "62/62 [==============================] - 0s 973us/step - loss: 0.3525 - accuracy: 0.8420\n",
            "Epoch 73/150\n",
            "62/62 [==============================] - 0s 894us/step - loss: 0.3528 - accuracy: 0.8420\n",
            "Epoch 74/150\n",
            "62/62 [==============================] - 0s 934us/step - loss: 0.3513 - accuracy: 0.8436\n",
            "Epoch 75/150\n",
            "62/62 [==============================] - 0s 881us/step - loss: 0.3512 - accuracy: 0.8420\n",
            "Epoch 76/150\n",
            "62/62 [==============================] - 0s 919us/step - loss: 0.3514 - accuracy: 0.8388\n",
            "Epoch 77/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3494 - accuracy: 0.8420\n",
            "Epoch 78/150\n",
            "62/62 [==============================] - 0s 907us/step - loss: 0.3483 - accuracy: 0.8371\n",
            "Epoch 79/150\n",
            "62/62 [==============================] - 0s 916us/step - loss: 0.3482 - accuracy: 0.8436\n",
            "Epoch 80/150\n",
            "62/62 [==============================] - 0s 999us/step - loss: 0.3466 - accuracy: 0.8436\n",
            "Epoch 81/150\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "62/62 [==============================] - 0s 907us/step - loss: 0.3473 - accuracy: 0.8420\n",
            "Epoch 82/150\n",
            "62/62 [==============================] - 0s 936us/step - loss: 0.3470 - accuracy: 0.8420\n",
            "Epoch 83/150\n",
            "62/62 [==============================] - 0s 901us/step - loss: 0.3451 - accuracy: 0.8453\n",
            "Epoch 84/150\n",
            "62/62 [==============================] - 0s 879us/step - loss: 0.3448 - accuracy: 0.8404\n",
            "Epoch 85/150\n",
            "62/62 [==============================] - 0s 880us/step - loss: 0.3436 - accuracy: 0.8453\n",
            "Epoch 86/150\n",
            "62/62 [==============================] - 0s 894us/step - loss: 0.3430 - accuracy: 0.8436\n",
            "Epoch 87/150\n",
            "62/62 [==============================] - 0s 860us/step - loss: 0.3420 - accuracy: 0.8469\n",
            "Epoch 88/150\n",
            "62/62 [==============================] - 0s 913us/step - loss: 0.3421 - accuracy: 0.8469\n",
            "Epoch 89/150\n",
            "62/62 [==============================] - 0s 981us/step - loss: 0.3415 - accuracy: 0.8388\n",
            "Epoch 90/150\n",
            "62/62 [==============================] - 0s 995us/step - loss: 0.3403 - accuracy: 0.8518\n",
            "Epoch 91/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3393 - accuracy: 0.8485\n",
            "Epoch 92/150\n",
            "62/62 [==============================] - 0s 976us/step - loss: 0.3387 - accuracy: 0.8420\n",
            "Epoch 93/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3383 - accuracy: 0.8518\n",
            "Epoch 94/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3373 - accuracy: 0.8469\n",
            "Epoch 95/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3368 - accuracy: 0.8502\n",
            "Epoch 96/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3360 - accuracy: 0.8550\n",
            "Epoch 97/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3360 - accuracy: 0.8502\n",
            "Epoch 98/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3366 - accuracy: 0.8469\n",
            "Epoch 99/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3363 - accuracy: 0.8485\n",
            "Epoch 100/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3345 - accuracy: 0.8534\n",
            "Epoch 101/150\n",
            "62/62 [==============================] - 0s 981us/step - loss: 0.3335 - accuracy: 0.8485\n",
            "Epoch 102/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3333 - accuracy: 0.8453\n",
            "Epoch 103/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3322 - accuracy: 0.8502\n",
            "Epoch 104/150\n",
            "62/62 [==============================] - 0s 998us/step - loss: 0.3320 - accuracy: 0.8502\n",
            "Epoch 105/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3309 - accuracy: 0.8518\n",
            "Epoch 106/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3315 - accuracy: 0.8518\n",
            "Epoch 107/150\n",
            "62/62 [==============================] - 0s 879us/step - loss: 0.3313 - accuracy: 0.8518\n",
            "Epoch 108/150\n",
            "62/62 [==============================] - 0s 926us/step - loss: 0.3304 - accuracy: 0.8550\n",
            "Epoch 109/150\n",
            "62/62 [==============================] - 0s 881us/step - loss: 0.3296 - accuracy: 0.8518\n",
            "Epoch 110/150\n",
            "62/62 [==============================] - 0s 861us/step - loss: 0.3299 - accuracy: 0.8534\n",
            "Epoch 111/150\n",
            "62/62 [==============================] - 0s 951us/step - loss: 0.3281 - accuracy: 0.8518\n",
            "Epoch 112/150\n",
            "62/62 [==============================] - 0s 984us/step - loss: 0.3283 - accuracy: 0.8550\n",
            "Epoch 113/150\n",
            "62/62 [==============================] - 0s 905us/step - loss: 0.3270 - accuracy: 0.8534\n",
            "Epoch 114/150\n",
            "62/62 [==============================] - 0s 904us/step - loss: 0.3260 - accuracy: 0.8534\n",
            "Epoch 115/150\n",
            "62/62 [==============================] - 0s 889us/step - loss: 0.3256 - accuracy: 0.8567\n",
            "Epoch 116/150\n",
            "62/62 [==============================] - 0s 889us/step - loss: 0.3252 - accuracy: 0.8567\n",
            "Epoch 117/150\n",
            "62/62 [==============================] - 0s 880us/step - loss: 0.3260 - accuracy: 0.8599\n",
            "Epoch 118/150\n",
            "62/62 [==============================] - 0s 882us/step - loss: 0.3246 - accuracy: 0.8550\n",
            "Epoch 119/150\n",
            "62/62 [==============================] - 0s 902us/step - loss: 0.3237 - accuracy: 0.8567\n",
            "Epoch 120/150\n",
            "62/62 [==============================] - 0s 905us/step - loss: 0.3232 - accuracy: 0.8616\n",
            "Epoch 121/150\n",
            "62/62 [==============================] - 0s 888us/step - loss: 0.3226 - accuracy: 0.8550\n",
            "Epoch 122/150\n",
            "62/62 [==============================] - 0s 900us/step - loss: 0.3208 - accuracy: 0.8583\n",
            "Epoch 123/150\n",
            "62/62 [==============================] - 0s 950us/step - loss: 0.3214 - accuracy: 0.8599\n",
            "Epoch 124/150\n",
            "62/62 [==============================] - 0s 923us/step - loss: 0.3212 - accuracy: 0.8583\n",
            "Epoch 125/150\n",
            "62/62 [==============================] - 0s 968us/step - loss: 0.3204 - accuracy: 0.8583\n",
            "Epoch 126/150\n",
            "62/62 [==============================] - 0s 871us/step - loss: 0.3191 - accuracy: 0.8616\n",
            "Epoch 127/150\n",
            "62/62 [==============================] - 0s 921us/step - loss: 0.3194 - accuracy: 0.8632\n",
            "Epoch 128/150\n",
            "62/62 [==============================] - 0s 892us/step - loss: 0.3189 - accuracy: 0.8583\n",
            "Epoch 129/150\n",
            "62/62 [==============================] - 0s 940us/step - loss: 0.3174 - accuracy: 0.8599\n",
            "Epoch 130/150\n",
            "62/62 [==============================] - 0s 930us/step - loss: 0.3173 - accuracy: 0.8616\n",
            "Epoch 131/150\n",
            "62/62 [==============================] - 0s 968us/step - loss: 0.3168 - accuracy: 0.8664\n",
            "Epoch 132/150\n",
            "62/62 [==============================] - 0s 923us/step - loss: 0.3160 - accuracy: 0.8664\n",
            "Epoch 133/150\n",
            "62/62 [==============================] - 0s 900us/step - loss: 0.3160 - accuracy: 0.8616\n",
            "Epoch 134/150\n",
            "62/62 [==============================] - 0s 949us/step - loss: 0.3148 - accuracy: 0.8648\n",
            "Epoch 135/150\n",
            "62/62 [==============================] - 0s 893us/step - loss: 0.3145 - accuracy: 0.8632\n",
            "Epoch 136/150\n",
            "62/62 [==============================] - 0s 983us/step - loss: 0.3152 - accuracy: 0.8616\n",
            "Epoch 137/150\n",
            "62/62 [==============================] - 0s 902us/step - loss: 0.3131 - accuracy: 0.8616\n",
            "Epoch 138/150\n",
            "62/62 [==============================] - 0s 909us/step - loss: 0.3128 - accuracy: 0.8648\n",
            "Epoch 139/150\n",
            "62/62 [==============================] - 0s 994us/step - loss: 0.3127 - accuracy: 0.8616\n",
            "Epoch 140/150\n",
            "62/62 [==============================] - 0s 949us/step - loss: 0.3119 - accuracy: 0.8616\n",
            "Epoch 141/150\n",
            "62/62 [==============================] - 0s 923us/step - loss: 0.3126 - accuracy: 0.8664\n",
            "Epoch 142/150\n",
            "62/62 [==============================] - 0s 866us/step - loss: 0.3125 - accuracy: 0.8664\n",
            "Epoch 143/150\n",
            "62/62 [==============================] - 0s 889us/step - loss: 0.3115 - accuracy: 0.8648\n",
            "Epoch 144/150\n",
            "62/62 [==============================] - 0s 952us/step - loss: 0.3102 - accuracy: 0.8632\n",
            "Epoch 145/150\n",
            "62/62 [==============================] - 0s 985us/step - loss: 0.3105 - accuracy: 0.8648\n",
            "Epoch 146/150\n",
            "62/62 [==============================] - 0s 981us/step - loss: 0.3097 - accuracy: 0.8632\n",
            "Epoch 147/150\n",
            "62/62 [==============================] - 0s 929us/step - loss: 0.3101 - accuracy: 0.8648\n",
            "Epoch 148/150\n",
            "62/62 [==============================] - 0s 925us/step - loss: 0.3085 - accuracy: 0.8632\n",
            "Epoch 149/150\n",
            "62/62 [==============================] - 0s 937us/step - loss: 0.3080 - accuracy: 0.8648\n",
            "Epoch 150/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3096 - accuracy: 0.8567\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f8a574b6ca0>"
            ]
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# compile the keras model\n",
        "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "# fit the keras model on the training data\n",
        "model.fit(X_train, y_train, epochs=150, batch_size=10)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yC40vSdu2qA3",
        "outputId": "f5950f86-e690-4c0b-953e-0e74942e0167"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "5/5 [==============================] - 0s 1ms/step - loss: 0.4264 - accuracy: 0.8117\n",
            "Accuracy: 81.17\n"
          ]
        }
      ],
      "source": [
        "# evaluate the model\n",
        "_, accuracy = model.evaluate(X_test, y_test)\n",
        "print('Accuracy: %.2f' % (accuracy*100))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UQmb1kKU2qA3"
      },
      "source": [
        "### Let's try a different structure for the neural networks"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S5ysNFMF2qA3"
      },
      "outputs": [],
      "source": [
        "from keras import initializers\n",
        "\n",
        "model2 = Sequential()\n",
        "model2.add(Dense(50, input_dim=8, kernel_initializer ='he_uniform', activation='relu')) # 1000 neurons\n",
        "#model.add(Dense(100, init='uniform', activation='tanh')) # 100 neurons with tanh activation function\n",
        "model2.add(Dense(100, kernel_initializer ='he_uniform', activation='relu')) # 500 neurons\n",
        "model2.add(Dense(1, kernel_initializer = 'he_uniform', activation='sigmoid')) # 1 output neuron"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lddEpayI2qA3",
        "outputId": "6ce9b9e6-74fb-4a1a-abc1-707e19c6b7c5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/150\n",
            "62/62 [==============================] - 1s 1ms/step - loss: 0.5235 - accuracy: 0.7345\n",
            "Epoch 2/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4494 - accuracy: 0.7801\n",
            "Epoch 3/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4387 - accuracy: 0.7785\n",
            "Epoch 4/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.4184 - accuracy: 0.8029\n",
            "Epoch 5/150\n",
            "62/62 [==============================] - 0s 2ms/step - loss: 0.4053 - accuracy: 0.8062\n",
            "Epoch 6/150\n",
            "62/62 [==============================] - 0s 2ms/step - loss: 0.3924 - accuracy: 0.8062\n",
            "Epoch 7/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3887 - accuracy: 0.8094\n",
            "Epoch 8/150\n",
            "62/62 [==============================] - 0s 2ms/step - loss: 0.3779 - accuracy: 0.8290\n",
            "Epoch 9/150\n",
            "62/62 [==============================] - 0s 2ms/step - loss: 0.3706 - accuracy: 0.8274\n",
            "Epoch 10/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3592 - accuracy: 0.8388\n",
            "Epoch 11/150\n",
            "62/62 [==============================] - 0s 987us/step - loss: 0.3544 - accuracy: 0.8420\n",
            "Epoch 12/150\n",
            "62/62 [==============================] - 0s 967us/step - loss: 0.3483 - accuracy: 0.8420\n",
            "Epoch 13/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3399 - accuracy: 0.8404\n",
            "Epoch 14/150\n",
            "62/62 [==============================] - 0s 2ms/step - loss: 0.3336 - accuracy: 0.8404\n",
            "Epoch 15/150\n",
            "62/62 [==============================] - 0s 2ms/step - loss: 0.3252 - accuracy: 0.8534\n",
            "Epoch 16/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3183 - accuracy: 0.8648\n",
            "Epoch 17/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3189 - accuracy: 0.8567\n",
            "Epoch 18/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3059 - accuracy: 0.8583\n",
            "Epoch 19/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.3014 - accuracy: 0.8664\n",
            "Epoch 20/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2964 - accuracy: 0.8730\n",
            "Epoch 21/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2909 - accuracy: 0.8664\n",
            "Epoch 22/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2805 - accuracy: 0.8762\n",
            "Epoch 23/150\n",
            "62/62 [==============================] - 0s 997us/step - loss: 0.2767 - accuracy: 0.8827\n",
            "Epoch 24/150\n",
            "62/62 [==============================] - 0s 990us/step - loss: 0.2725 - accuracy: 0.8779\n",
            "Epoch 25/150\n",
            "62/62 [==============================] - 0s 991us/step - loss: 0.2653 - accuracy: 0.8827\n",
            "Epoch 26/150\n",
            "62/62 [==============================] - 0s 952us/step - loss: 0.2542 - accuracy: 0.9007\n",
            "Epoch 27/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2626 - accuracy: 0.8779\n",
            "Epoch 28/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2554 - accuracy: 0.8909\n",
            "Epoch 29/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2391 - accuracy: 0.9039\n",
            "Epoch 30/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2345 - accuracy: 0.8990\n",
            "Epoch 31/150\n",
            "62/62 [==============================] - 0s 975us/step - loss: 0.2312 - accuracy: 0.9023\n",
            "Epoch 32/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2260 - accuracy: 0.9055\n",
            "Epoch 33/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.2263 - accuracy: 0.8990\n",
            "Epoch 34/150\n",
            "62/62 [==============================] - 0s 984us/step - loss: 0.2167 - accuracy: 0.9153\n",
            "Epoch 35/150\n",
            "62/62 [==============================] - 0s 985us/step - loss: 0.2143 - accuracy: 0.9202\n",
            "Epoch 36/150\n",
            "62/62 [==============================] - 0s 992us/step - loss: 0.2052 - accuracy: 0.9153\n",
            "Epoch 37/150\n",
            "62/62 [==============================] - 0s 984us/step - loss: 0.2035 - accuracy: 0.9169\n",
            "Epoch 38/150\n",
            "62/62 [==============================] - 0s 990us/step - loss: 0.1996 - accuracy: 0.9202\n",
            "Epoch 39/150\n",
            "62/62 [==============================] - 0s 978us/step - loss: 0.1938 - accuracy: 0.9235\n",
            "Epoch 40/150\n",
            "62/62 [==============================] - 0s 965us/step - loss: 0.1904 - accuracy: 0.9186\n",
            "Epoch 41/150\n",
            "62/62 [==============================] - 0s 983us/step - loss: 0.1882 - accuracy: 0.9267\n",
            "Epoch 42/150\n",
            "62/62 [==============================] - 0s 995us/step - loss: 0.1835 - accuracy: 0.9169\n",
            "Epoch 43/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1764 - accuracy: 0.9283\n",
            "Epoch 44/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1752 - accuracy: 0.9316\n",
            "Epoch 45/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1690 - accuracy: 0.9430\n",
            "Epoch 46/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1661 - accuracy: 0.9397\n",
            "Epoch 47/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1657 - accuracy: 0.9446\n",
            "Epoch 48/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1559 - accuracy: 0.9479\n",
            "Epoch 49/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1671 - accuracy: 0.9381\n",
            "Epoch 50/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1525 - accuracy: 0.9446\n",
            "Epoch 51/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1454 - accuracy: 0.9479\n",
            "Epoch 52/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1420 - accuracy: 0.9544\n",
            "Epoch 53/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1387 - accuracy: 0.9560\n",
            "Epoch 54/150\n",
            "62/62 [==============================] - 0s 986us/step - loss: 0.1365 - accuracy: 0.9642\n",
            "Epoch 55/150\n",
            "62/62 [==============================] - 0s 936us/step - loss: 0.1309 - accuracy: 0.9528\n",
            "Epoch 56/150\n",
            "62/62 [==============================] - 0s 966us/step - loss: 0.1287 - accuracy: 0.9609\n",
            "Epoch 57/150\n",
            "62/62 [==============================] - 0s 944us/step - loss: 0.1277 - accuracy: 0.9642\n",
            "Epoch 58/150\n",
            "62/62 [==============================] - 0s 931us/step - loss: 0.1234 - accuracy: 0.9674\n",
            "Epoch 59/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1268 - accuracy: 0.9625\n",
            "Epoch 60/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1191 - accuracy: 0.9707\n",
            "Epoch 61/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1181 - accuracy: 0.9625\n",
            "Epoch 62/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.1106 - accuracy: 0.9674\n",
            "Epoch 63/150\n",
            "62/62 [==============================] - 0s 971us/step - loss: 0.1055 - accuracy: 0.9772\n",
            "Epoch 64/150\n",
            "62/62 [==============================] - 0s 974us/step - loss: 0.1080 - accuracy: 0.9772\n",
            "Epoch 65/150\n",
            "62/62 [==============================] - 0s 948us/step - loss: 0.1002 - accuracy: 0.9853\n",
            "Epoch 66/150\n",
            "62/62 [==============================] - 0s 988us/step - loss: 0.0998 - accuracy: 0.9788\n",
            "Epoch 67/150\n",
            "62/62 [==============================] - 0s 968us/step - loss: 0.0974 - accuracy: 0.9788\n",
            "Epoch 68/150\n",
            "62/62 [==============================] - 0s 993us/step - loss: 0.0912 - accuracy: 0.9902\n",
            "Epoch 69/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0928 - accuracy: 0.9821\n",
            "Epoch 70/150\n",
            "62/62 [==============================] - 0s 998us/step - loss: 0.0942 - accuracy: 0.9821\n",
            "Epoch 71/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0882 - accuracy: 0.9805\n",
            "Epoch 72/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0874 - accuracy: 0.9837\n",
            "Epoch 73/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0821 - accuracy: 0.9902\n",
            "Epoch 74/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0784 - accuracy: 0.9886\n",
            "Epoch 75/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0780 - accuracy: 0.9886\n",
            "Epoch 76/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0754 - accuracy: 0.9919\n",
            "Epoch 77/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0805 - accuracy: 0.9837\n",
            "Epoch 78/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0717 - accuracy: 0.9902\n",
            "Epoch 79/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0666 - accuracy: 0.9935\n",
            "Epoch 80/150\n",
            "62/62 [==============================] - 0s 953us/step - loss: 0.0661 - accuracy: 0.9935\n",
            "Epoch 81/150\n",
            "62/62 [==============================] - 0s 918us/step - loss: 0.0637 - accuracy: 0.9951\n",
            "Epoch 82/150\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0617 - accuracy: 0.9919\n",
            "Epoch 83/150\n",
            "62/62 [==============================] - 0s 953us/step - loss: 0.0601 - accuracy: 0.9967\n",
            "Epoch 84/150\n",
            "62/62 [==============================] - 0s 974us/step - loss: 0.0594 - accuracy: 0.9935\n",
            "Epoch 85/150\n",
            "62/62 [==============================] - 0s 941us/step - loss: 0.0577 - accuracy: 0.9902\n",
            "Epoch 86/150\n",
            "62/62 [==============================] - 0s 921us/step - loss: 0.0559 - accuracy: 0.9951\n",
            "Epoch 87/150\n",
            "62/62 [==============================] - 0s 928us/step - loss: 0.0533 - accuracy: 0.9951\n",
            "Epoch 88/150\n",
            "62/62 [==============================] - 0s 921us/step - loss: 0.0539 - accuracy: 0.9951\n",
            "Epoch 89/150\n",
            "62/62 [==============================] - 0s 939us/step - loss: 0.0528 - accuracy: 0.9951\n",
            "Epoch 90/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0516 - accuracy: 0.9951\n",
            "Epoch 91/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0509 - accuracy: 0.9935\n",
            "Epoch 92/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0463 - accuracy: 0.9984\n",
            "Epoch 93/150\n",
            "62/62 [==============================] - 0s 971us/step - loss: 0.0447 - accuracy: 0.9951\n",
            "Epoch 94/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0425 - accuracy: 0.9984\n",
            "Epoch 95/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0426 - accuracy: 0.9984\n",
            "Epoch 96/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0428 - accuracy: 0.9967\n",
            "Epoch 97/150\n",
            "62/62 [==============================] - 0s 935us/step - loss: 0.0407 - accuracy: 0.9984\n",
            "Epoch 98/150\n",
            "62/62 [==============================] - 0s 983us/step - loss: 0.0405 - accuracy: 0.9951\n",
            "Epoch 99/150\n",
            "62/62 [==============================] - 0s 925us/step - loss: 0.0391 - accuracy: 1.0000\n",
            "Epoch 100/150\n",
            "62/62 [==============================] - 0s 954us/step - loss: 0.0364 - accuracy: 0.9984\n",
            "Epoch 101/150\n",
            "62/62 [==============================] - 0s 962us/step - loss: 0.0354 - accuracy: 0.9984\n",
            "Epoch 102/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0338 - accuracy: 0.9984\n",
            "Epoch 103/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0334 - accuracy: 0.9984\n",
            "Epoch 104/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0324 - accuracy: 1.0000\n",
            "Epoch 105/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0314 - accuracy: 1.0000\n",
            "Epoch 106/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0316 - accuracy: 1.0000\n",
            "Epoch 107/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0310 - accuracy: 0.9984\n",
            "Epoch 108/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0301 - accuracy: 0.9967\n",
            "Epoch 109/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0279 - accuracy: 1.0000\n",
            "Epoch 110/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0266 - accuracy: 1.0000\n",
            "Epoch 111/150\n",
            "62/62 [==============================] - 0s 2ms/step - loss: 0.0241 - accuracy: 1.0000\n",
            "Epoch 112/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0244 - accuracy: 1.0000\n",
            "Epoch 113/150\n",
            "62/62 [==============================] - 0s 990us/step - loss: 0.0243 - accuracy: 1.0000\n",
            "Epoch 114/150\n",
            "62/62 [==============================] - 0s 953us/step - loss: 0.0262 - accuracy: 1.0000\n",
            "Epoch 115/150\n",
            "62/62 [==============================] - 0s 962us/step - loss: 0.0376 - accuracy: 0.9935\n",
            "Epoch 116/150\n",
            "62/62 [==============================] - 0s 933us/step - loss: 0.0305 - accuracy: 0.9984\n",
            "Epoch 117/150\n",
            "62/62 [==============================] - 0s 943us/step - loss: 0.0266 - accuracy: 0.9984\n",
            "Epoch 118/150\n",
            "62/62 [==============================] - 0s 957us/step - loss: 0.0234 - accuracy: 1.0000\n",
            "Epoch 119/150\n",
            "62/62 [==============================] - 0s 943us/step - loss: 0.0208 - accuracy: 1.0000\n",
            "Epoch 120/150\n",
            "62/62 [==============================] - 0s 928us/step - loss: 0.0195 - accuracy: 1.0000\n",
            "Epoch 121/150\n",
            "62/62 [==============================] - 0s 958us/step - loss: 0.0185 - accuracy: 1.0000\n",
            "Epoch 122/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0175 - accuracy: 1.0000\n",
            "Epoch 123/150\n",
            "62/62 [==============================] - 0s 951us/step - loss: 0.0180 - accuracy: 0.9984\n",
            "Epoch 124/150\n",
            "62/62 [==============================] - 0s 957us/step - loss: 0.0181 - accuracy: 1.0000\n",
            "Epoch 125/150\n",
            "62/62 [==============================] - 0s 938us/step - loss: 0.0164 - accuracy: 1.0000\n",
            "Epoch 126/150\n",
            "62/62 [==============================] - 0s 912us/step - loss: 0.0156 - accuracy: 1.0000\n",
            "Epoch 127/150\n",
            "62/62 [==============================] - 0s 958us/step - loss: 0.0151 - accuracy: 1.0000\n",
            "Epoch 128/150\n",
            "62/62 [==============================] - 0s 920us/step - loss: 0.0150 - accuracy: 1.0000\n",
            "Epoch 129/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0145 - accuracy: 1.0000\n",
            "Epoch 130/150\n",
            "62/62 [==============================] - 0s 946us/step - loss: 0.0140 - accuracy: 1.0000\n",
            "Epoch 131/150\n",
            "62/62 [==============================] - 0s 947us/step - loss: 0.0147 - accuracy: 1.0000\n",
            "Epoch 132/150\n",
            "62/62 [==============================] - 0s 957us/step - loss: 0.0130 - accuracy: 1.0000\n",
            "Epoch 133/150\n",
            "62/62 [==============================] - 0s 917us/step - loss: 0.0126 - accuracy: 1.0000\n",
            "Epoch 134/150\n",
            "62/62 [==============================] - 0s 912us/step - loss: 0.0121 - accuracy: 1.0000\n",
            "Epoch 135/150\n",
            "62/62 [==============================] - 0s 969us/step - loss: 0.0124 - accuracy: 1.0000\n",
            "Epoch 136/150\n",
            "62/62 [==============================] - 0s 958us/step - loss: 0.0125 - accuracy: 1.0000\n",
            "Epoch 137/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0116 - accuracy: 1.0000\n",
            "Epoch 138/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0112 - accuracy: 1.0000\n",
            "Epoch 139/150\n",
            "62/62 [==============================] - 0s 978us/step - loss: 0.0102 - accuracy: 1.0000\n",
            "Epoch 140/150\n",
            "62/62 [==============================] - 0s 965us/step - loss: 0.0093 - accuracy: 1.0000\n",
            "Epoch 141/150\n",
            "62/62 [==============================] - 0s 924us/step - loss: 0.0095 - accuracy: 1.0000\n",
            "Epoch 142/150\n",
            "62/62 [==============================] - 0s 955us/step - loss: 0.0102 - accuracy: 1.0000\n",
            "Epoch 143/150\n",
            "62/62 [==============================] - 0s 909us/step - loss: 0.0100 - accuracy: 1.0000\n",
            "Epoch 144/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0091 - accuracy: 1.0000\n",
            "Epoch 145/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0096 - accuracy: 1.0000\n",
            "Epoch 146/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0081 - accuracy: 1.0000\n",
            "Epoch 147/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0086 - accuracy: 1.0000\n",
            "Epoch 148/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0088 - accuracy: 1.0000\n",
            "Epoch 149/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0073 - accuracy: 1.0000\n",
            "Epoch 150/150\n",
            "62/62 [==============================] - 0s 1ms/step - loss: 0.0070 - accuracy: 1.0000\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f8a59b01e20>"
            ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Compile model\n",
        "model2.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "# Fit the model\n",
        "model2.fit(X_train, y_train, epochs=150, batch_size=10,  verbose=1) # 150 epoch, 10 batch size, verbose = 2\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rvVmNT522qA3",
        "outputId": "1860736b-7ff9-43bf-93cb-eeff2575dc58"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "5/5 [==============================] - 0s 2ms/step - loss: 1.7818 - accuracy: 0.7143\n",
            "Accuracy: 71.43\n"
          ]
        }
      ],
      "source": [
        "# evaluate the model\n",
        "_, accuracy = model2.evaluate(X_test, y_test)\n",
        "print('Accuracy: %.2f' % (accuracy*100))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ovTpfcui2qA3"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}